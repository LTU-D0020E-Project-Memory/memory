{#
/**
 * @file
 * Concentration Game.
 */
#}
<div class="block wrapper col-12 d-flex flex-column justify-content-center concentrate">
  <h3 class=" col-12 text-center">{{ title }}</h3>
  {% if do_render %}
    {% if instruction %}
      <p class="text-center {{ uniqueID }}_ins">{{ instruction }}</p>
    {% endif %}
    <div id="{{ uniqueID }}" class="game mt-3 {{ gridSetup }}">
      {# Grid classes #}
    </div>
    

    <style>
    /* CSS for graph table */
    table {
        border-collapse: collapse;
    }

    th {
        background-color: #ccc;
    }

    td, th {
        border: 1px solid black;
        padding: 8px;
    }

    tr:nth-child(even) {
        background-color: #f2f2f2;
    }
    </style>

    <div class="btn-wrap">
      <form action="{{ link.url }}" class="concentration_form">
        {% if playAgain %}
          <input disabled data-game="#{{ uniqueID }}" type="button" class="btn-disabled reset button btn btn-blue igbgame__button _{{ uniqueID }}_replay mt-3" value="{{ playAgain }}" />
        {% endif %}
        <br />
        {% if link.url %}
          <input type="submit" class="btn-disabled button btn btn-blue igbgame__button _{{ uniqueID }}_button mt-3" disabled value="{{ link.title}}" />
        {% endif %}
      </form>
    </div>
  {% else %}
    <p class="text-center">Insufficient cards to render concentration block, please add more cards.</p>
  {% endif %}
  <br>
  <table id="stats" class="statstable">
    <tr>
      <th>Time taken</th>
      <th>Amount of guesses</th>
      <th>Amount of hints</th>
    </tr>
    <tr>
      {# Data goes here #}
    </tr>
  </table>

  <div>
    <canvas id="chartTime"></canvas>
  </div>
  <div>
    <canvas id="chartComb"></canvas>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
    var cardAmount = "{{gridSetup}}";
    var hintLimit = "{{hintLimit}}";

    let root = document.documentElement;
    root.style.setProperty('--hint-color', "{{hintColor}}");
    root.style.setProperty('--hint-clarity', "{{hintClarity}}");
  </script>

  <script>
    function prepareArray() {
      let arr = localStorage.getItem('game_stats');
      let superArray = arr.split(";");
      superArray.pop();

      let i = 0;
      let labels = [];
      while (i < superArray.length) {
        superArray[i] = superArray[i].split("|");
        labels.push(String(i));
        i++;
      }
      
      return [superArray, labels];
    }

    function populateTable(inArray) {
      var table = document.getElementById("stats");
      for(let i = 0; i < (inArray.length); i++) {
        var row = table.insertRow();
        for(let z = 0; z < 3; z++) {
          var td = row.insertCell();
          td.textContent = inArray[i][z];
        }
      }
    }

    const data = prepareArray();
    populateTable(data[0]);
    const timesSeries = []
    data[0].forEach((game) => {
      timesSeries.push(game[0]);
    });

    const graphTime = document.getElementById('chartTime');
    new Chart(graphTime, {
      type: 'line',
      data: {
        labels: data[1],
        datasets: [{
          label: 'Label',
          data: timesSeries,
          borderwidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    const graphComb = document.getElementById('chartComb');
    new Chart(graphComb, {
      type: 'line',
      data: {
        labels: ['0', '1', '2', '3', '4'],
        datasets: [
          {
            label: 'Label',
            data: [0, 1, 2, 3, 4, 5],
            borderwidth: 1
          },
          {
            label: 'Label 2',
            data: [0, 1, 2],
            borderwidth: 2
          }
        ]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  </script>
</div>